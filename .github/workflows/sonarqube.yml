name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarQubeScan:
    name: SonarQube Analysis
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate versioning

      # Step 2: Set up JDK 17 for Maven builds
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 3: Cache SonarQube packages to speed up builds
      - name: Cache SonarQube Packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-cache
          restore-keys: ${{ runner.os }}-sonar-cache

      # Step 4: Cache Maven packages to speed up builds
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Step 5: Build the project using Maven
      - name: Build with Maven
        run: |
          cd parent &&  mvn clean install -Dmaven.test.skip=true

      - name: maven-settings-action
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.PARCOURS_TOKEN }}"}}}}]'
            
          
      - name: Deploy  document et exemplaire applications with Maven
        run: |
          cd parent && mvn clean deploy
          
      # Step 6: Run SonarQube analysis
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Analysis token associated with your project
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube server URL
        run: |
          cd parent
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectName='parcoursback-apps'

  dockerBuildAndPush_document_service:
    name: Build and Push Docker Image for document service
    runs-on: ubuntu-22.04
    needs: sonarQubeScan  # Ensure this job runs after the SonarQube analysis

    steps:
      # Step 7: Checkout code again (if needed)
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 8: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        run: echo "${{ secrets.PARCOURS_PACKAGES_CONTAINER }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        

      # Step 9: Build and push Docker image to the registry (if needed)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.9.0 
        with:
          context: .  # Use the current directory as the build context
          file: parent/composant-business/document-service/Dockerfile  # Specify the Dockerfile to use
          tags: ghcr.io/${{ github.actor }}/parcoursback-documents:latest  # Tag for the built image
          load: true  # Load the image into the Docker daemon (for local use)
          cache-from: type=gha  # Use GitHub Actions cache as a cache source
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions for future builds
          push: true  # Set to true if you want to push to a remote registry
          build-args: |
            PARCOURS_PACKAGES_URL=${{ secrets.PARCOURS_PACKAGES_URL }}
          secrets: |
            "PARCOURS_TOKEN=${{ secrets.PARCOURS_TOKEN }}"
          
  dockerBuildAndPush_exemplaire_service:
    name: Build and Push Docker Image for exemplaire service
    runs-on: ubuntu-22.04
    needs: sonarQubeScan  # Ensure this job runs after the SonarQube analysis

    steps:
      # Step 7: Checkout code again (if needed)
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 8: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        run: echo "${{ secrets.PARCOURS_PACKAGES_CONTAINER }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Step 9: Build and push Docker image to the registry (if needed)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .  # Use the current directory as the build context
          file: parent/composant-business/exemplaire-service/Dockerfile  # Specify the Dockerfile to use
          tags: ghcr.io/${{ github.actor }}/parcoursback-exemplaire:latest  # Tag for the built image
          load: true  # Load the image into the Docker daemon (for local use)
          cache-from: type=gha  # Use GitHub Actions cache as a cache source
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions for future builds
          push: true  # Set to true if you want to push to a remote registry
          build-args: |
            PARCOURS_PACKAGES_URL=${{ secrets.PARCOURS_PACKAGES_URL }}
          secrets: |
            "PARCOURS_TOKEN=${{ secrets.PARCOURS_TOKEN }}"
