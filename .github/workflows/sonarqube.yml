name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarQubeScan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate versioning

      # Step 2: Set up JDK 17 for Maven builds
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 3: Cache SonarQube packages to speed up builds
      - name: Cache SonarQube Packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-cache
          restore-keys: ${{ runner.os }}-sonar-cache

      # Step 4: Cache Maven packages to speed up builds
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Maven Settings
        run: |
          echo "<settings xmlns='http://maven.apache.org/SETTINGS/1.0.0' \
                xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' \
                xsi:schemaLocation='http://maven.apache.org/SETTINGS/1.0.0 \
                http://maven.apache.org/xsd/settings-1.0.0.xsd'>" > ~/.m2/settings.xml
          echo "" >> ~/.m2/settings.xml
          echo "  <activeProfiles>" >> ~/.m2/settings.xml
          echo "    <activeProfile>github</activeProfile>" >> ~/.m2/settings.xml
          echo "  </activeProfiles>" >> ~/.m2/settings.xml
          echo "" >> ~/.m2/settings.xml
          echo "  <profiles>" >> ~/.m2/settings.xml
          echo "    <profile>" >> ~/.m2/settings.xml
          echo "      <id>github</id>" >> ~/.m2/settings.xml
          echo "      <repositories>" >> ~/.m2/settings.xml
          echo "        <repository>" >> ~/.m2/settings.xml
          echo "          <id>central</id>" >> ~/.m2/settings.xml
          echo "          <url>https://repo1.maven.org/maven2</url>" >> ~/.m2/settings.xml
          echo "        </repository>" >> ~/.m2/settings.xml
          echo "        <repository>" >> ~/.m2/settings.xml
          echo "          <id>github</id>" >> ~/.m2/settings.xml
          echo "          <url>https://maven.pkg.github.com/kouamdo/parcoursback</url>" >> ~/.m2/settings.xml
          echo "          <snapshots>" >> ~/.m2/settings.xml
          echo "            <enabled>true</enabled>" >> ~/.m2/settings.xml
          echo "          </snapshots>" >> ~/.m2/settings.xml
          echo "        </repository>" >> ~/.m2/settings.xml
          echo "      </repositories>" >> ~/.m2/settings.xml
          echo "    </profile>" >> ~/.m2/settings.xml
          echo "  </profiles>" >> ~/.m2/settings.xml
          echo "" >> ~/.m2/settings.xml
          echo "  <servers>" >> ~/.m2/settings.xml
          echo "    <server>" >> ~/.m2/settings.xml
          echo "      <id>github</id>" >> ~/.m2/settings.xml
          echo "      <username>kouamdo</username>" >> ~/.m2/settings.xml
          echo "      <password>${{ secrets.PARCOURS_TOKEN }}</password>" >> ~/.m2/settings.xml  # Use the secret here securely
          echo "    </server>" >> ~/.m2/settings.xml
          echo "  </servers>" >> ~/.m2/settings.xml
          echo "</settings>" >> ~/.m2/settings.xml
      
      # Step 5: Build the project using Maven
      - name: Build with Maven
        run: |
          cd parent &&  mvn clean install -Dmaven.test.skip=true && mvn deploy --settings ~/.m2/settings.xml
          
      # - name: Deploy  document et exemplaire applications with Maven
      #   env:
      #     PARCOURSBACK_TOKEN: ${{ secrets.parcours_token }}
      #   run: |
      #     cd parent &&  mvn deploy --settings settings.xml

      # Step 6: Run SonarQube analysis
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Analysis token associated with your project
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube server URL
        run: |
          cd parent
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey='sqa_39d51faf0f0b92870aafb760a621dcc33cec9998' \
            -Dsonar.projectName='parcoursback-apps'

  dockerBuildAndPush_document_service:
    name: Build and Push Docker Image for document service
    runs-on: ubuntu-latest
    needs: sonarQubeScan  # Ensure this job runs after the SonarQube analysis

    steps:
      # Step 7: Checkout code again (if needed)
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 8: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 9: Build and push Docker image to the registry (if needed)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .  # Use the current directory as the build context
          file: parent/composant-business/document-service/Dockerfile  # Specify the Dockerfile to use
          tags: parcoursback:latest  # Tag for the built image
          load: true  # Load the image into the Docker daemon (for local use)
          cache-from: type=gha  # Use GitHub Actions cache as a cache source
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions for future builds
          push: false  # Set to true if you want to push to a remote registry
          
  dockerBuildAndPush_exemplaire_service:
    name: Build and Push Docker Image for exemplaire service
    runs-on: ubuntu-latest
    needs: sonarQubeScan  # Ensure this job runs after the SonarQube analysis

    steps:
      # Step 7: Checkout code again (if needed)
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 8: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 9: Build and push Docker image to the registry (if needed)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .  # Use the current directory as the build context
          file: parent/composant-business/exemplaire-service/Dockerfile  # Specify the Dockerfile to use
          tags: parcoursback:latest  # Tag for the built image
          load: true  # Load the image into the Docker daemon (for local use)
          cache-from: type=gha  # Use GitHub Actions cache as a cache source
          cache-to: type=gha,mode=max  # Store cache in GitHub Actions for future builds
          push: false  # Set to true if you want to push to a remote registry
  
